// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
import "google/protobuf/empty.proto";

option objc_class_prefix = "RTG";


// Interface exported by the server.
service TaskManager {
  rpc health_check(google.protobuf.Empty) returns (ServerStatus) {}

  rpc run_task(TaskStatement) returns (TaskStatus) {}

  rpc get_task_log(TaskLogInfo) returns (stream TaskLogFile) {}

  rpc kill_task(Task) returns (TaskStatus) {}

  rpc get_task_status(Task) returns (TaskStatus) {}

  rpc get_all_tasks(google.protobuf.Empty) returns (AllTasksStatus) {}

  rpc has_idle_resource(google.protobuf.Empty) returns (IdleResources) {}

  rpc report_progress(Progress) returns (ProgressResponse) {}
}

message ServerStatus {
    bool alive = 1;
}

message IdleResources {
    bool exists = 1;
}

message TaskStatement {
    string task_id = 1;
    string command = 2;
    string name = 3;
    map<string, string> task_env = 4;
}

message TaskStatus {
    string task_id = 1;
    enum Status {
        NOTSTART = 0;
        RUNNING = 1;
        DONE = 2;
        KILLED = 3;
        ABNORMAL = 4;
        NOTFOUND = 5;
        NO_RESOURCE = 6;
    }
    Status status = 2; // TaskStatus가 의미하는 값은 Enum으로 정의
}

message Task {
    string task_id = 1;
}

message TaskLogInfo {
    string task_id = 1;
    string log_file_path = 2;
}

message AllTasksStatus {
    repeated TaskStatus task_status_array = 1;
}

message TaskLogFile {
    bytes log_file = 1;
    bytes error_message = 2;

message Progress {
    float progress = 1;
    double leap_second = 2;
    int32 pid = 3;
}

message ProgressResponse {
    enum ReceivedStatus {
      SUCCESS = 0;
      FAIL = 1;
    }
    ReceivedStatus received_status = 1;
}
