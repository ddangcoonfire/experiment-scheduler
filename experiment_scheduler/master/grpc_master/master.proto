syntax = "proto3";
package experiment_scheduler.task_manager.grpc_task_manager;
import "google/protobuf/empty.proto";


option objc_class_prefix = "RTG";


// Interface exported by the server.
service Master {
      rpc request_experiments(ExperimentStatement) returns (MasterResponse) {}

      rpc kill_task(Task) returns (TaskStatus) {}

      rpc get_task_status(Task) returns (TaskStatus) {}

      rpc get_task_log(Task) returns (stream TaskLogFile) {}

      rpc get_all_tasks(Experiment) returns (AllExperimentsStatus) {}

      rpc halt_process_monitor(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

message ExperimentStatement {
    string name = 1;
    repeated MasterTaskStatement tasks = 2;
}

message MasterTaskStatement {
    string command = 1;
    string name = 2;
    map<string, string> task_env = 4;
}

message MasterResponse {
    string experiment_id = 1;
    enum ResponseStatus {
        SUCCESS = 0;
        FAIL = 1;
    }
    ResponseStatus response = 2; // response가 의미하는 값은 Enum으로 정의
}

message TaskStatus {
    string task_id = 1;
    enum Status {
        NOTSTART = 0;
        RUNNING = 1;
        DONE = 2;
        KILLED = 3;
        ABNORMAL = 4;
        NOTFOUND = 5;
    }
    Status status = 2; // TaskStatus가 의미하는 값은 Enum으로 정의
}

message Task {
    string task_id = 1;
}

message Experiment {
    string experiment_id = 1;
}

message AllTasksStatus {
    repeated TaskStatus task_status_array= 1;
}

message ExperimentsStatus {
    string experiment_id = 1;
    AllTasksStatus task_status_array = 2;
}

message AllExperimentsStatus {
    repeated ExperimentsStatus experiment_status_array = 1;
}

message TaskLog {
    string logfile_path = 1;
}

message TaskLogFile {
    bytes log_file = 1;
    bytes error_message = 2;
}