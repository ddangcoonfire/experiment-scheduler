syntax = "proto3";
package experiment_scheduler.task_manager.grpc_task_manager;
import "google/protobuf/empty.proto";


option objc_class_prefix = "RTG";


// Interface exported by the server.
service Master {
      rpc request_experiments(ExperimentStatement) returns (MasterResponse) {}

      rpc kill_task(Task) returns (TaskStatus) {}

      rpc get_task_status(Task) returns (TaskStatus) {}

      rpc get_task_log(Task) returns (stream TaskLogFile) {}

      rpc get_all_tasks(Experiment) returns (AllExperimentsStatus) {}

      rpc halt_process_monitor(google.protobuf.Empty) returns (google.protobuf.Empty) {}

      rpc edit_task(EditTask) returns (MasterResponse) {}

      rpc request_abnormal_exited_tasks(TaskList) returns (RequestAbnormalExitedTasksResponse) {}

      rpc upload_file(stream MasterFileUploadRequest) returns (MasterFileUploadResponse) {}

      rpc delete_file(MasterFileDeleteRequest) returns (MasterFileDeleteResponse) {}

}

message EditTask {
    string task_id = 1;
    string cmd = 2;
    map<string, string> task_env = 4;
}

message ExperimentStatement {
    string name = 1;
    enum Status {
        NOTSTART = 0;
        RUNNING = 1;
        DONE = 2;
        KILLED = 3;
        ABNORMAL = 4;
        NOTFOUND = 5;
        NO_RESOURCE = 6;
    }
    repeated MasterTaskStatement tasks = 2;
}

message MasterTaskStatement {
    string command = 1;
    string name = 2;
    map<string, string> task_env = 3;
    repeated string files = 4;
    string cwd = 5;
}

message MasterFileUploadRequest {
    string name = 1;
    bytes file = 2;
}

message MasterFileDeleteRequest {
    string name = 1;
}

message MasterFileUploadResponse {
    enum ResponseStatus {
        SUCCESS = 0;
        FAIL = 1;
    }
    ResponseStatus response = 1;
}

message MasterFileDeleteResponse {
    enum ResponseStatus {
        SUCCESS = 0;
        FAIL = 1;
    }
    ResponseStatus response = 1;
}

message MasterResponse {
    string experiment_id = 1;
    enum ResponseStatus {
        SUCCESS = 0;
        FAIL = 1;
    }
    ResponseStatus response = 2;
}


message TaskStatus {
    string task_id = 1;
    enum Status {
        NOTSTART = 0;
        RUNNING = 1;
        DONE = 2;
        KILLED = 3;
        ABNORMAL = 4;
        NOTFOUND = 5;
        NO_RESOURCE = 6;
    }
    Status status = 2;
}

message Task {
    string task_id = 1;
}

message Experiment {
    string experiment_id = 1;
}

message AllTasksStatus {
    repeated TaskStatus task_status_array= 1;
}

message ExperimentsStatus {
    string experiment_id = 1;
    AllTasksStatus task_status_array = 2;
}

message AllExperimentsStatus {
    repeated ExperimentsStatus experiment_status_array = 1;
}

message TaskLog {
    string logfile_path = 1;
}

message TaskLogFile {
    bytes log_file = 1;
    bytes error_message = 2;
}

message TaskList {
    repeated Task task_list = 1;
}

message RequestAbnormalExitedTasksResponse {
    enum ResponseStatus {
        SUCCESS = 0;
        FAIL = 1;
    }
    TaskList not_running_tasks = 1;
    ResponseStatus response = 2;
}
