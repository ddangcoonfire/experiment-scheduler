# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from common import master_task_manager_pb2 as master__task__manager__pb2


class SubmitterCommandServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.run_experiments = channel.unary_unary(
                '/SubmitterCommandService/run_experiments',
                request_serializer=master__task__manager__pb2.SubmitterRequest.SerializeToString,
                response_deserializer=master__task__manager__pb2.MasterResponse.FromString,
                )
        self.ls = channel.unary_unary(
                '/SubmitterCommandService/ls',
                request_serializer=master__task__manager__pb2.SubmitterRequest.SerializeToString,
                response_deserializer=master__task__manager__pb2.MasterResponse.FromString,
                )
        self.ps = channel.unary_unary(
                '/SubmitterCommandService/ps',
                request_serializer=master__task__manager__pb2.SubmitterRequest.SerializeToString,
                response_deserializer=master__task__manager__pb2.MasterResponse.FromString,
                )
        self.log = channel.unary_unary(
                '/SubmitterCommandService/log',
                request_serializer=master__task__manager__pb2.SubmitterLogRequest.SerializeToString,
                response_deserializer=master__task__manager__pb2.MasterResponse.FromString,
                )


class SubmitterCommandServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def run_experiments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ls(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ps(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def log(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubmitterCommandServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'run_experiments': grpc.unary_unary_rpc_method_handler(
                    servicer.run_experiments,
                    request_deserializer=master__task__manager__pb2.SubmitterRequest.FromString,
                    response_serializer=master__task__manager__pb2.MasterResponse.SerializeToString,
            ),
            'ls': grpc.unary_unary_rpc_method_handler(
                    servicer.ls,
                    request_deserializer=master__task__manager__pb2.SubmitterRequest.FromString,
                    response_serializer=master__task__manager__pb2.MasterResponse.SerializeToString,
            ),
            'ps': grpc.unary_unary_rpc_method_handler(
                    servicer.ps,
                    request_deserializer=master__task__manager__pb2.SubmitterRequest.FromString,
                    response_serializer=master__task__manager__pb2.MasterResponse.SerializeToString,
            ),
            'log': grpc.unary_unary_rpc_method_handler(
                    servicer.log,
                    request_deserializer=master__task__manager__pb2.SubmitterLogRequest.FromString,
                    response_serializer=master__task__manager__pb2.MasterResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SubmitterCommandService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SubmitterCommandService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def run_experiments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SubmitterCommandService/run_experiments',
            master__task__manager__pb2.SubmitterRequest.SerializeToString,
            master__task__manager__pb2.MasterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ls(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SubmitterCommandService/ls',
            master__task__manager__pb2.SubmitterRequest.SerializeToString,
            master__task__manager__pb2.MasterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SubmitterCommandService/ps',
            master__task__manager__pb2.SubmitterRequest.SerializeToString,
            master__task__manager__pb2.MasterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def log(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SubmitterCommandService/log',
            master__task__manager__pb2.SubmitterLogRequest.SerializeToString,
            master__task__manager__pb2.MasterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
